{"version":3,"sources":["components/wrapper/wrapper.js","components/card/card.js","components/container/container.js","components/navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Card","id","onClick","src","photo","alt","name","Container","Navbar","score","topScore","clicked","App","state","animals","shuffle","array","i","j","temp","length","Math","floor","random","_this","setState","localScore","localClicked","counter","localTopScore","forEach","clickId","alert","push","_this2","this","container","navbar_navbar","wrapper_wrapper","map","animal","index","card_card","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8sDAKeA,SAFC,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCAAyCJ,EAAMK,2BCUxEC,SAVF,SAAAN,GACT,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAgCG,GAAIP,EAAMO,GAAIC,QAAS,kBAAMR,EAAMQ,QAAQR,EAAMO,MAC5FN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,MAAOC,IAAKX,EAAMY,KAAMR,UAAU,wBCF/CS,EAFG,SAAAb,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMK,WCU9CS,SAVA,SAAAd,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,sBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,qFACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,UAAsCJ,EAAMe,MAA5C,kBAAkEf,EAAMgB,aCA9EC,EAAU,GACVF,EAAQ,EACRC,EAAW,EAyFFE,6MAtFbC,MAAQ,CACNC,UACAH,UACAF,QACAC,cAGFK,QAAU,SAACC,GAET,IAAIC,EAAI,EACJC,EAAI,EACJC,EAAO,KAEX,IAAKF,EAAID,EAAMI,OAAS,EAAGH,EAAI,EAAGA,GAAK,EACrCC,EAAIG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IACpCE,EAAOH,EAAMC,GACbD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKC,EAEbK,EAAKC,SAAS,CAAEX,QAASE,OAK3Bd,QAAU,SAAAD,GACR,IAAIyB,EAAaF,EAAKX,MAAMJ,MACxBkB,EAAeH,EAAKX,MAAMF,QAC1BiB,EAAU,EACVC,EAAgBL,EAAKX,MAAMH,SAC/Bc,EAAKX,MAAMF,QAAQmB,QAAQ,SAAUC,GAC/BA,IAAY9B,GACd2B,MAGAA,EAAU,GACZF,EAAa,EACbC,EAAe,GACfK,MAAM,gBAENN,GAAc,EACdC,EAAaM,KAAKhC,GACfyB,EAAaG,IACdA,EAAgBH,GAEC,KAAfA,IACFM,MAAM,iDACNN,EAAa,EACbC,EAAe,KAGnBH,EAAKC,SAAS,CAAEd,QAASgB,IACzBH,EAAKC,SAAS,CAAEhB,MAAOiB,IACvBF,EAAKC,SAAS,CAACf,SAAUmB,IACzBL,EAAKT,QAAQS,EAAKX,MAAMC,kFAMjB,IAAAoB,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,CACE5B,MAAO0B,KAAKtB,MAAMJ,MAClBC,SAAUyB,KAAKtB,MAAMH,WAGvBf,EAAAC,EAAAC,cAACyC,EAAD,KAEIH,KAAKtB,MAAMC,QAAQyB,IAAI,SAACC,EAAQC,GAAT,OACrB9C,EAAAC,EAAAC,cAAC6C,EAAD,CACEC,IAAKF,EACLxC,GAAIuC,EAAOvC,GACXK,KAAMkC,EAAOlC,KACbF,MAAOoC,EAAOpC,MACdF,QAASgC,EAAKhC,qBA5EZ0C,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eba47a69.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper col-md-12 mx-auto text-center\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = props => {\r\n    return(\r\n    <div className=\"mx-auto col-md-4 single-image\" id={props.id} onClick={() => props.onClick(props.id)} >\r\n        <div className=\"img-container\">\r\n            <img src={props.photo} alt={props.name} className=\"image img-fluid\"/>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\n\r\n\r\nconst Container = props => <div className=\"container\">{props.children}</div>;\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst Navbar = props => {\r\n    return (\r\n        <div className=\"row mt-2 col-md-12 text-center navbar\">\r\n            <h1 className=\" title\">Animal Memory Game</h1>\r\n            <h4 className=\"instructions\">Click an animal to gain points, don't click any portrait twice or it's game over!</h4>\r\n            <h4 className=\"mx-auto score\">Score: {props.score} | High Score: {props.topScore}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport Wrapper from \"./components/wrapper\"\nimport './App.css';\nimport animals from \"./stuff.json\";\nimport Card from './components/card';\nimport Container from \"./components/container\";\nimport Navbar from \"./components/navbar\"\n\nconst clicked = [];\nconst score = 0;\nconst topScore = 0;\n\nclass App extends React.Component {\n  state = {\n    animals,\n    clicked,\n    score,\n    topScore\n  }\n\n  shuffle = (array) => {\n    //fisher-yates shuffle copy pastaed from the internet\n    let i = 0\n    let j = 0\n    let temp = null\n\n    for (i = array.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1))\n      temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n    }\n    this.setState({ animals: array });\n  };\n\n\n\n  onClick = id => {\n    let localScore = this.state.score;\n    let localClicked = this.state.clicked;\n    let counter = 0;\n    let localTopScore = this.state.topScore;\n    this.state.clicked.forEach(function (clickId) {\n      if (clickId === id) {\n        counter++\n      }\n    })\n    if (counter > 0) {\n      localScore = 0\n      localClicked = [];\n      alert(\"Game Over!\")\n    } else {\n      localScore += 1;\n      localClicked.push(id);\n      if(localScore > localTopScore){\n        localTopScore = localScore;\n      }\n      if (localScore === 12){\n        alert(\"Congratulations! You clicked all the animals.\");\n        localScore = 0;\n        localClicked = [];\n      }\n    };\n    this.setState({ clicked: localClicked });\n    this.setState({ score: localScore });\n    this.setState({topScore: localTopScore});\n    this.shuffle(this.state.animals);\n  }\n\n\n\n\n  render() {\n    return (\n      <Container>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n        >\n        </Navbar>\n        <Wrapper>\n          {\n            this.state.animals.map((animal, index) =>\n              <Card\n                key={index}\n                id={animal.id}\n                name={animal.name}\n                photo={animal.photo}\n                onClick={this.onClick}\n              />\n            )\n          }\n        </Wrapper>\n      </Container>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}